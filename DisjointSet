#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;
int FindRoot(int i, vector<int>& roots);

void Union(vector<int>& size, vector<int>& roots, int city_1, int city_2) {
    int rootA = FindRoot(city_1, roots);
    int rootB = FindRoot(city_2, roots);
    if(size[rootA] < size[rootB]) {
        roots[rootA] = roots[rootB];
        size[rootB] += size[rootA];
    } else {
        roots[rootB] = roots[rootA];
        size[rootA] += size[rootB];
    }
    return;
}

int FindRoot(int i, vector<int>& roots) {
    while(roots[i] != i)
    {
        roots[i] = roots[ roots[i] ] ; 
        i = roots[i];
    }
    return i;   
}
int main(){
    int q;
    cin >> q;
    for(int a0 = 0; a0 < q; a0++){
        int n;
        int m;
        int x;
        int y;
        cin >> n >> m >> x >> y;
        vector<int> size(n+1);
        vector<int> roots(n+1);
        for(int i = 1; i < n+1; i++) {
            roots[i] = i;
            size[i] = 1;
        }
        for(int a1 = 0; a1 < m; a1++){
            int city_1;
            int city_2;
            cin >> city_1 >> city_2;
            //Merge
            Union(size, roots, city_1, city_2);
        }
        
        //Find connected components
        map<int, vector<int>> components;
        for(int i = 1; i <= n; i++) {
            //Find the root node
            int root = FindRoot(i, roots);
            //cout << "Root of " << i << " is " << root << endl;
            components[root].push_back(i);
        }
        long total_cost = 0;
        
        if(m==0)
            total_cost=(long)n*x;
        else if(x<=y)
            total_cost=(long)n*x;
        else total_cost = components.size()*x + ((n) - components.size()) * y;
        cout << total_cost << endl;
    }
    return 0;
}
